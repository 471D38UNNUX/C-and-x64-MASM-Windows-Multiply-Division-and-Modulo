; Listing generated by Microsoft (R) Optimizing Compiler Version 19.42.34435.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	a
PUBLIC	A
EXTRN	__imp___stdio_common_vfprintf:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__security_check_cookie:PROC
COMM	B:QWORD:02H
_DATA	ENDS
a	DQ	ffffffffffffffffH
A	DQ	ffffffffffffffffH
_DATA	ENDS
PUBLIC	main
PUBLIC	printf
PUBLIC	_vfprintf_l
PUBLIC	__local_stdio_printf_options
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main DD	imagerel $LN16
	DD	imagerel $LN16+466
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$muls DD	imagerel muls
	DD	imagerel muls+250
	DD	imagerel $unwind$muls
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$mul DD	imagerel mul
	DD	imagerel mul+134
	DD	imagerel $unwind$mul
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN6
	DD	imagerel $LN6+85
	DD	imagerel $unwind$printf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN4
	DD	imagerel $LN4+68
	DD	imagerel $unwind$_vfprintf_l
$SG4294967267 DB '%llu', 0aH, 00H
	ORG $+2
$SG4294967268 DB '%llu x %llu = %016llX%016llX', 0aH, 00H
_DATA	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 041b01H
	DD	07017521bH
	DD	030156016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mul DD	020501H
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$muls DD	020601H
	DD	030021206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main DD	0a1801H
	DD	0e6418H
	DD	0d5418H
	DD	0c3418H
	DD	0f0147218H
	DD	07010e012H
xdata	ENDS
; Function compile flags: /Ogtpy
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_stdio_config.h
; Line 92
	lea	rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage
; Line 93
	ret	0
__local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$dead$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\stdio.h
; Line 644
$LN4:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, r9
	mov	rdi, rdx
	mov	rsi, rcx
; Line 645
	call	__local_stdio_printf_options
	xor	r9d, r9d
	mov	QWORD PTR [rsp+32], rbx
	mov	r8, rdi
	mov	rdx, rsi
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp___stdio_common_vfprintf
; Line 646
	mov	rbx, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT printf
_TEXT	SEGMENT
_Format$ = 80
printf	PROC						; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\stdio.h
; Line 956
$LN6:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rbx
	push	rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rcx
; Line 959
	lea	rsi, QWORD PTR _Format$[rsp+8]
; Line 960
	mov	ecx, 1
	call	QWORD PTR __imp___acrt_iob_func
	mov	rbx, rax
; Line 645
	call	__local_stdio_printf_options
	xor	r9d, r9d
	mov	QWORD PTR [rsp+32], rsi
	mov	r8, rdi
	mov	rdx, rbx
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp___stdio_common_vfprintf
; Line 963
	add	rsp, 48					; 00000030H
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT mul
_TEXT	SEGMENT
multiplicand$ = 8
multiplier$ = 16
res$ = 24
mul	PROC						; COMDAT
; File D:\Assembly Project\Mul\Mul.c
; Line 9
	mov	QWORD PTR [rsp+8], rbx
; Line 15
	mov	eax, edx
	mov	r10, rdx
	mov	rbx, rcx
; Line 16
	mov	r9d, ecx
	imul	r9, rax
; Line 18
	shr	rbx, 32					; 00000020H
	mov	QWORD PTR [r8+8], r9
; Line 19
	mov	rdx, rbx
	imul	rdx, rax
	mov	r11d, ecx
; Line 29
	shr	r10, 32					; 00000020H
; Line 30
	imul	r11, r10
; Line 42
	imul	rbx, r10
	mov	eax, r11d
	shr	r9, 32					; 00000020H
	add	rdx, r9
	shr	r11, 32					; 00000020H
	mov	rcx, rdx
	xor	r9d, r9d
	shl	rdx, 32					; 00000020H
	mov	DWORD PTR [r8+12], r9d
	add	rdx, QWORD PTR [r8+8]
	mov	QWORD PTR [r8+8], rdx
	shr	rdx, 32					; 00000020H
	add	rdx, rax
	shr	rcx, 32					; 00000020H
	mov	rax, rdx
	mov	DWORD PTR [r8+12], r9d
	shr	rdx, 32					; 00000020H
; Line 43
	add	rdx, rcx
	shl	rax, 32					; 00000020H
	add	QWORD PTR [r8+8], rax
	add	rdx, rbx
; Line 44
	mov	rbx, QWORD PTR [rsp+8]
	add	r11, rdx
	mov	QWORD PTR [r8], r11
	ret	0
mul	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT muls
_TEXT	SEGMENT
res1$ = 0
res2$ = 0
multiplicand$dead$ = 32
multiplier$dead$ = 40
res$dead$ = 48
muls	PROC						; COMDAT
; File D:\Assembly Project\Mul\Mul.c
; Line 46
	push	rbx
	sub	rsp, 16
; Line 24
	mov	rbx, -4294967296			; ffffffff00000000H
	xor	r11d, r11d
	mov	r10, -8589934591			; fffffffe00000001H
; Line 38
	mov	rdx, 4294967296				; 0000000100000000H
	mov	QWORD PTR res1$[rsp+8], r10
; Line 16
	mov	QWORD PTR B+8, r10
; Line 22
	mov	DWORD PTR res1$[rsp+12], r11d
; Line 24
	mov	rcx, QWORD PTR res1$[rsp+8]
	add	rcx, rbx
; Line 22
	mov	DWORD PTR B+12, r11d
; Line 24
	mov	r8, QWORD PTR B+8
	mov	QWORD PTR res1$[rsp+8], rcx
	add	r8, rbx
; Line 31
	and	rcx, rbx
; Line 24
	mov	QWORD PTR B+8, r8
; Line 31
	shr	r8, 32					; 00000020H
; Line 33
	inc	r8
; Line 37
	mov	DWORD PTR res1$[rsp+12], r11d
; Line 36
	mov	rax, r8
; Line 37
	mov	DWORD PTR B+12, r11d
; Line 38
	lea	r9, QWORD PTR [rdx+rcx]
; Line 36
	shl	rax, 32					; 00000020H
; Line 38
	add	r9, QWORD PTR res1$[rsp+8]
	add	QWORD PTR B+8, rax
; Line 60
	mov	eax, r9d
; Line 76
	and	r9, rbx
; Line 16
	mov	QWORD PTR res2$[rsp+8], r10
; Line 22
	mov	DWORD PTR res2$[rsp+12], r11d
; Line 24
	mov	rcx, QWORD PTR res2$[rsp+8]
	add	rcx, rbx
; Line 34
	shr	r8, 32					; 00000020H
; Line 24
	mov	QWORD PTR res2$[rsp+8], rcx
; Line 31
	and	rcx, rbx
; Line 38
	add	rdx, rcx
	mov	DWORD PTR res2$[rsp+12], r11d
	add	rdx, QWORD PTR res2$[rsp+8]
; Line 43
	lea	rcx, QWORD PTR [r8-3]
; Line 60
	mov	ecx, ecx
; Line 64
	add	rcx, rax
	mov	eax, edx
	add	rcx, rax
; Line 76
	and	rdx, rbx
	mov	QWORD PTR B, rcx
	add	r9, rdx
	and	rcx, rbx
	mov	DWORD PTR B+4, r11d
	add	rcx, QWORD PTR B
	add	rcx, rbx
	add	rcx, r9
	mov	QWORD PTR B, rcx
; Line 95
	add	rsp, 16
	pop	rbx
	ret	0
muls	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT main
_TEXT	SEGMENT
res1$1 = 48
res2$2 = 48
main	PROC						; COMDAT
; File D:\Assembly Project\Mul\Mul.c
; Line 342
$LN16:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r14
	push	r15
	sub	rsp, 64					; 00000040H
; Line 343
	mov	rbp, QWORD PTR a
; Line 22
	xor	r15d, r15d
	mov	r14d, -1				; ffffffffH
	mov	r11d, ebp
	imul	r11, r14
; Line 29
	mov	r10, rbp
	mov	edi, ebp
	shr	r10, 32					; 00000020H
	mov	rbx, r11
; Line 30
	mov	rdx, r10
	mov	QWORD PTR B+8, r11
	imul	rdx, r14
; Line 16
	mov	QWORD PTR res1$1[rsp+8], r11
; Line 32
	mov	eax, edx
; Line 39
	mov	rcx, rdx
	shr	rcx, 32					; 00000020H
	shr	rbx, 32					; 00000020H
	mov	DWORD PTR B+12, r15d
; Line 22
	mov	DWORD PTR res1$1[rsp+12], r15d
; Line 20
	lea	r8, QWORD PTR [r11+rbx]
; Line 19
	mov	r11, -4294967296			; ffffffff00000000H
; Line 21
	mov	r9, r8
; Line 19
	shl	rbx, 32					; 00000020H
; Line 23
	shl	r8, 32					; 00000020H
; Line 24
	add	r8, QWORD PTR B+8
	mov	QWORD PTR B+8, r8
; Line 31
	shr	r8, 32					; 00000020H
; Line 33
	add	r8, rax
	shr	r9, 32					; 00000020H
; Line 36
	mov	rax, r8
; Line 37
	mov	DWORD PTR B+12, r15d
; Line 38
	mov	rsi, QWORD PTR B+8
	shl	rax, 32					; 00000020H
	add	rsi, rax
	shr	r8, 32					; 00000020H
; Line 43
	add	r8, rdx
	mov	QWORD PTR B+8, rsi
	add	r8, rcx
; Line 15
	mov	rax, rbp
; Line 24
	mov	rcx, QWORD PTR res1$1[rsp+8]
; Line 43
	add	r8, r9
; Line 15
	sar	rax, 63					; 0000003fH
; Line 24
	add	rcx, rbx
	imul	rdi, r11
	add	rdi, rcx
; Line 15
	mov	ecx, eax
; Line 24
	mov	QWORD PTR res1$1[rsp+8], rdi
; Line 16
	mov	eax, eax
	imul	rax, r14
; Line 38
	imul	rcx, r11
	mov	rdx, rax
; Line 31
	shr	rdi, 32					; 00000020H
; Line 17
	shr	rdx, 32					; 00000020H
; Line 38
	sub	rdi, r10
; Line 24
	add	rdx, rax
; Line 37
	mov	DWORD PTR res1$1[rsp+12], r15d
; Line 38
	mov	r10, QWORD PTR res1$1[rsp+8]
; Line 24
	shl	rdx, 32					; 00000020H
	mov	QWORD PTR res2$2[rsp+8], rax
; Line 43
	mov	eax, r8d
; Line 76
	and	r8, r11
; Line 22
	mov	DWORD PTR res2$2[rsp+12], r15d
; Line 24
	add	rdx, QWORD PTR res2$2[rsp+8]
	mov	QWORD PTR res2$2[rsp+8], rdx
; Line 38
	and	rdx, r11
	shl	rdi, 32					; 00000020H
	add	r10, rdi
; Line 37
	mov	DWORD PTR res2$2[rsp+12], r15d
; Line 38
	add	rcx, QWORD PTR res2$2[rsp+8]
	add	rdx, rcx
; Line 60
	mov	r9d, r10d
; Line 64
	add	r9, rax
; Line 76
	and	r10, r11
	mov	eax, edx
	add	r10, r8
	add	r9, rax
	and	rdx, r11
	mov	QWORD PTR B, r9
	mov	DWORD PTR B+4, r15d
	add	rdx, QWORD PTR B
	and	r9, r11
	add	rdx, r10
; Line 345
	mov	QWORD PTR [rsp+32], rsi
; Line 76
	add	r9, rdx
; Line 345
	lea	rcx, OFFSET FLAT:$SG4294967268
	mov	rdx, -1
; Line 76
	mov	QWORD PTR B, r9
; Line 345
	mov	r8, rbp
	call	printf
; Line 350
	mov	edx, 255				; 000000ffH
	mov	QWORD PTR A, -1
	lea	rcx, OFFSET FLAT:$SG4294967267
	mov	QWORD PTR a, 255			; 000000ffH
	call	printf
; Line 353
	mov	rbx, QWORD PTR [rsp+96]
	xor	eax, eax
	mov	rbp, QWORD PTR [rsp+104]
	mov	rsi, QWORD PTR [rsp+112]
	add	rsp, 64					; 00000040H
	pop	r15
	pop	r14
	pop	rdi
	ret	0
main	ENDP
_TEXT	ENDS
END
